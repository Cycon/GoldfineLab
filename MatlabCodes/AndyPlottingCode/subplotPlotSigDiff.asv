function subplotPlotSigDiff(figuretitle)

%uses output of batspectrogram. Calls plotsigdiff though code is pasted
%here so that it won't plot the spectrograms but ensures that it converts
%to log.
%
%plots opposite colors from original program to be consistent with my
%subplotSpectrogram's colors

%[] consider option to change the plotting range to zoom in
%[] figure out how to change the window and level interactively
%[] consider option to save goodlist names and indeces and reload the next
%time in case replotting with different plotting Range.
%change plotting routine to a function that runs when the Done button is
%pushed. Might allow for replotting from the GUI with different channels.
%Then could also put in text boxes to change the range!
%[]need legend

if nargin<1
    figuretitle=input('Figuretitle:','s');
end

plottingRange=[4 24];%range to plot, may want to ask user to choose or change default
fprintf('plotting range set at %.0f to %.0f Hz',plottingRange(1),plottingRange(2));
if strcmp(input('Change plotting range? (y-yes)','s'),'y');
    plottingRange(1)=input('Starting Frequency:');
    plottingRange(2)=input('Ending Frequency:');
    if length(plottingRange)<2
        return
    end
end
[spectrogramFile1, pathname1] = uigetfile('*SG.mat', 'Select 1st spectrogram for comparison');
[spectrogramFile2, pathname2] = uigetfile('*SG.mat', 'Select 2nd spectrogram for comparison');
spectrogram1=load(fullfile(pathname1,spectrogramFile1));
spectrogram2=load(fullfile(pathname2,spectrogramFile2));

ChannelList=spectrogram1.ChannelList;
% t=spectrogram.t;
% S=spectrogram.S;
% Serr=spectrogram.Serr;
% f=spectrogram.f;
params=spectrogram1.params;
movingwinInSec=spectrogram1.movingwinInSec;

scrsz = get(0,'ScreenSize'); %for defining the figure size, need to change if want on a 2nd monitor



%%
%choose channels to plot (could also change this to pick BadChannelList
%output of plotSigFreq for channels to suppress). Or could pick goodlist.
% figure; %may want this to be it's own figure or plot on top of sigFreq so
% can see which one you want to plot.
disp('Choose channels to plot');
Listbox = uicontrol('Style', 'listbox','Position', [10 40 80 350], 'String', ChannelList,'Max',length(ChannelList)-1,'Value',[]);
uicontrol('Position',[100 60 60 60],'String','Done','Callback',{@Done_callback});
uicontrol('Style','text','String',figuretitle,'Position',[10 10 150 30]);
 uiwait %this command seems necessary to ensure it waits to select channels and press done. it
%stops waiting when window is closed though could also type uiresume
function Done_callback(varargin)
    index_selected = get(Listbox,'Value');
    goodlist=ChannelList(index_selected);
%     close(gcf); %may want to have it close figure but I prefer to leave
%     open the sigFreq plot
    uiresume
    subplotSpec(goodlist,index_selected)
end


%%
%plot with subplot command for number of channels don't forget code to
%enlarge. also may want to give user option to zoom on f (so may then
%change batSpectrogram to do all the spectra and decrease the amount you
%see here).
    function subplotSpec(goodlist,index_selected)
figure
%set(gcf,'Name',[figuretitle '-Figure' num2str(i)], 'Position',[1 1 scrsz(3)*0.95 scrsz(4)*0.9]); %big size
set(gcf,'Name',figuretitle, 'Position',[1 1 scrsz(3)*0.8 scrsz(4)*0.9]); %small size


for p=1:length(goodlist)
    plottingFreqIndeces=spectrogram1.f{index_selected(p)}>plottingRange(1) & spectrogram1.f{index_selected(p)}<plottingRange(2);
    subplot(length(goodlist),1,p)
    [mask,Xdiff]=plotsigdiffonly(spectrogram1.S{index_selected(p)}(:,plottingFreqIndeces),spectrogram1.Serr{index_selected(p)}(:,:,plottingFreqIndeces),...
        spectrogram2.S{index_selected(p)}(:,plottingFreqIndeces),spectrogram2.Serr{index_selected(p)}(:,:,plottingFreqIndeces),...
        'l',spectrogram1.t{index_selected(p)},spectrogram1.f{index_selected(p)}(plottingFreqIndeces));
%     imagesc(t{index_selected(p)},f{index_selected(p)}(plottingFreqIndeces),10*log10(S{index_selected(p)}(:,plottingFreqIndeces))');
    imagesc(spectrogram1.t{index_selected(p)},spectrogram1.f{index_selected(p)}(:,plottingFreqIndeces),-mask'.*abs(Xdiff)',[-5 5]); 
    axis xy; %ensures x and y start at 0 in the lower left corner
    ylabel(goodlist{p},'FontSize',12);
%     xlabel('seconds','FontSize',12);
    colorbar;
end
titlename=sprintf('Difference spectrogram calculated with NW=%.0f and K=%.0f, pad=%.0f, moving win in Sec [%.0f %.2f]',params.tapers(1),params.tapers(2),params.pad,...
    movingwinInSec(1),movingwinInSec(2));
% title(titlename);
annotation(figure(gcf),'textbox','String',titlename,'Position',[.4 0.931 0.1948 0.05459],'FontSize',10,...
    'HorizontalAlignment','center','LineStyle','none');
xlabel('seconds','FontSize',12);

allowaxestogrow;
    end
end

function [mask,Xdiff]=plotsigdiffonly(X1,X1err,X2,X2err,plt,t,f)
% Function to plot significant differences between two time-frequency arrays X1 and X2
% given errors X1err, X2err. 
% Usage: mask=plotsigdiff(X1,X1err,X2,X2err,plt,t,f)
%
% X1 err and X2err contain upper and lower confidence intervals for X1 and X2
% The plot generated is shows X1-X2 where the difference is significant
% either in dB or on a linear scale.
%
% Inputs:
% X1: input array t x f. Can also be a function of just the frequency. 
% X1err: lower and upper confidence intervals for X1: lower/upper x t x f
% X2: input array t x f. if vector then as row vector
% X2err: lower and upper condidence intervals for X2: lower/upper x t x f
% plt: 'l' for log, 'nl' for no log,'n' for no plot at all. %Andy - spec l, coh nl
% t: t axis grid for plot. If X1,X2 are vectors, then specify t=1.
% f: f axis grid for plot.
%
% Outputs:
% mask: +1 for all t-f (or f) indices for which the X1 significantly greater than
% X2, -1 for all t-f (or f) indices for which X1 is significantly less than X2,
% and zero otherwise
%
% Xdiff: X1-X2
%
if nargin < 7; error('Need all arguments'); end;
% [T1,F1]=size(X1); [T2,F2]=size(X2); 
[T,F]=check_consistency(X1,X2);
if F==1;
    X1=X1'; X2=X2';F=length(X1); T=1;
end;
ystr='';
if T==1, %T is size in rows of dataset. So =1 if vector. Not in this case.
    mask=zeros(1,F);
    indxneg=find(X1<X2err(1,:) & X2>X1err(2,:));
    indxpos=find(X1>X2err(2,:) & X2<X1err(1,:));
    mask(indxneg)=-1;
    mask(indxpos)=+1;
    if strcmp(plt,'l'); 
        X1=10*log10(X1); X2=10*log10(X2); X1err=10*log10(X1err); X2err=10*log10(X2err);
        ystr= '  dB';
    end;
%     subplot(311); plot(f,X1,f,X1err(1,:),f,X1err(2,:));
%     title('Spectrum 1');
%     xlabel('f')
%     ylabel(['S1' ystr]);
%     subplot(312); plot(f,X2,f,X2err(1,:),f,X2err(2,:));
%     title('Spectrum 2');
%     xlabel('f')
%     ylabel(['S2' ystr]);
%     subplot(313); plot(f,mask.*(X1-X2));
%     title('Difference where significant');
%     xlabel('f')
%     ylabel(['S1-S2' ystr]);
else %AG - this below is what we use to plot spectrogram differences
    mask=zeros(T,F);
    for n=1:length(t);
        for m=1:length(f);
           if X1(n,m)<X2err(1,n,m) && X2(n,m)>X1err(2,n,m);
              mask(n,m)=-1;
           elseif X2(n,m)<X1err(1,n,m) && X1(n,m)>X2err(2,n,m);
              mask(n,m)=+1;
           end;
        end;
    end;
    if strcmp(plt,'l'); %AG- convert to log scale
       X1=10*log10(X1);X2=10*log10(X2); %X1err=10*log10(X1err); X2err=10*log10(X2err);
        ystr='  dB';
    end;
%     if ~strcmp(plt,'n'); %AG - if asked to plot
%         subplot(311); imagesc(t,f,X1'); axis xy; colorbar;
%         xlabel('f')
%         ylabel(['S1' ystr]);
%         subplot(312); imagesc(t,f,X2'); axis xy; colorbar;
%         xlabel('f')
%         ylabel(['S2' ystr]);
% 	%     subplot(313); imagesc(t,f,(mask.*(X1-X2))'); axis xy; colorbar
%         subplot(313); imagesc(t,f,mask'); axis xy; colorbar %AG - this is the plot we create. Its simply a 1 / 0 / -1 plot. No gradation for amount of difference
%         xlabel('f')
%         ylabel('Significance');
%     end;
end
Xdiff=X1-X2;
end
